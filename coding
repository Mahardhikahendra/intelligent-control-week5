@@ -0,0 +1,72 @@
import gymnasium as gym
import numpy as np
import tensorflow as tf
from tensorflow import keras
from collections import deque
import random

# Inisialisasi environment (CartPole)
env = gym.make("CartPole-v1")

# Parameter DQN
state_size = env.observation_space.shape[0]
action_size = env.action_space.n
learning_rate = 0.001
gamma = 0.95
epsilon = 1.0
epsilon_min = 0.01
epsilon_decay = 0.995
batch_size = 32
memory = deque(maxlen=2000)

# Model Neural Network (Q-Network)
model = keras.Sequential([
    keras.layers.Dense(24, input_shape=(state_size,), activation="relu"),
    keras.layers.Dense(24, activation="relu"),
    keras.layers.Dense(action_size, activation="linear")
])
model.compile(loss="mse", optimizer=keras.optimizers.Adam(learning_rate=learning_rate))

# Fungsi aksi (Exploration vs Exploitation)
def select_action(state, epsilon):
    if np.random.rand() <= epsilon:
        return np.random.choice(action_size)  # Eksplorasi
    q_values = model.predict(state, verbose=0)
    return np.argmax(q_values[0])  # Eksploitasi

# Training loop
episodes = 100
for episode in range(episodes):
    state, _ = env.reset()  # Gymnasium return (obs, info)
    state = np.reshape(state, [1, state_size])

    for time in range(500):
        action = select_action(state, epsilon)
        next_state, reward, terminated, truncated, _ = env.step(action)
        done = terminated or truncated
        next_state = np.reshape(next_state, [1, state_size])

        # Simpan ke memory
        memory.append((state, action, reward, next_state, done))
        state = next_state

        if done:
            print(f"Episode {episode+1}/{episodes}, Score: {time+1}, Epsilon: {epsilon:.2f}")
            break

    # Training dari memory
    if len(memory) > batch_size:
        minibatch = random.sample(memory, batch_size)
        for state_mb, action_mb, reward_mb, next_state_mb, done_mb in minibatch:
            target = reward_mb
            if not done_mb:
                target += gamma * np.amax(model.predict(next_state_mb, verbose=0)[0])
            target_f = model.predict(state_mb, verbose=0)
            target_f[0][action_mb] = target
            model.fit(state_mb, target_f, epochs=1, verbose=0)

    # Decay epsilon
    if epsilon > epsilon_min:
        epsilon *= epsilon_decay

print("Training selesai!")
